{
  "_args": [
    [
      {
        "raw": "pubsub-js",
        "scope": null,
        "escapedName": "pubsub-js",
        "name": "pubsub-js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Work\\CoinKat\\server"
    ]
  ],
  "_from": "pubsub-js@latest",
  "_id": "pubsub-js@1.6.0",
  "_inCache": true,
  "_location": "/pubsub-js",
  "_nodeVersion": "6.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pubsub-js-1.6.0.tgz_1516133425792_0.012921955669298768"
  },
  "_npmUser": {
    "name": "mrgnrdrck",
    "email": "morgan@roderick.dk"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pubsub-js",
    "scope": null,
    "escapedName": "pubsub-js",
    "name": "pubsub-js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pubsub-js/-/pubsub-js-1.6.0.tgz",
  "_shasum": "232d36485ce7905a54629ec5783d9f6f4c638026",
  "_shrinkwrap": null,
  "_spec": "pubsub-js",
  "_where": "C:\\Work\\CoinKat\\server",
  "author": {
    "name": "Morgan Roderick",
    "email": "morgan@roderick.dk",
    "url": "http://roderick.dk"
  },
  "bugs": {
    "url": "https://github.com/mroderick/PubSubJS/issues"
  },
  "dependencies": {},
  "description": "Dependency free publish/subscribe library",
  "devDependencies": {
    "eslint": "^4.14.0",
    "mocha": "^4.0.1",
    "nyc": "^11.4.1",
    "referee": "^1.2.0",
    "sinon": "^4.1.3"
  },
  "directories": {
    "lib": "src",
    "test": "test"
  },
  "dist": {
    "shasum": "232d36485ce7905a54629ec5783d9f6f4c638026",
    "tarball": "https://registry.npmjs.org/pubsub-js/-/pubsub-js-1.6.0.tgz"
  },
  "gitHead": "e54d9f20f5b1c444fcd0dd4a4d3baadd08a194ec",
  "homepage": "https://github.com/mroderick/PubSubJS#readme",
  "keywords": [
    "pub/sub",
    "pubsub",
    "publish/subscribe",
    "publish",
    "subscribe"
  ],
  "license": "MIT",
  "main": "./src/pubsub.js",
  "maintainers": [
    {
      "name": "mrgnrdrck",
      "email": "morgan@roderick.dk"
    }
  ],
  "name": "pubsub-js",
  "optionalDependencies": {},
  "readme": "# PubSubJS\n\n[![Travis build status](https://img.shields.io/travis/mroderick/PubSubJS.svg)](https://travis-ci.org/mroderick/PubSubJS) [![David](https://img.shields.io/david/mroderick/pubsubjs.svg)](https://david-dm.org/mroderick/PubSubJS) [![David](https://img.shields.io/david/dev/mroderick/pubsubjs.svg)](https://david-dm.org/mroderick/PubSubJS#info=devDependencies&view=table)\n![npm version](https://img.shields.io/npm/v/pubsub-js.svg) ![npm license](https://img.shields.io/npm/l/pubsub-js.svg) ![npm downloads per month](https://img.shields.io/npm/dm/pubsub-js.svg)\n[![Coverage Status](https://coveralls.io/repos/github/mroderick/PubSubJS/badge.svg)](https://coveralls.io/github/mroderick/PubSubJS)\n\nPubSubJS is a [topic-based](http://en.wikipedia.org/wiki/Publish–subscribe_pattern#Message_filtering) [publish/subscribe](http://en.wikipedia.org/wiki/Publish/subscribe) library written in JavaScript.\n\nPubSubJS has synchronisation decoupling, so topics are published asynchronously. This helps keep your program predictable as the originator of topics will not be blocked while consumers process them.\n\nFor the adventurous, PubSubJS also supports synchronous topic publication. This can give a speedup in some environments (browsers, not all), but can also lead to some very difficult to reason about programs, where one topic triggers publication of another topic in the same execution chain.\n\n#### Single process\n\nPubSubJS is designed to be used within a **single process**, and is not a good candidate for multi-process applications (like [Node.js – Cluster](http://nodejs.org/api/cluster.html) with many sub-processes). If your Node.js app is a single process app, you're good. If it is (or is going to be) a multi-process app, you're probably better off using [redis Pub/Sub](http://redis.io/topics/pubsub) or similar\n\n## Key features\n\n* Dependency free\n* Synchronization decoupling\n* ES3 compatible. PubSubJS should be able to run everywhere that can execute JavaScript. Browsers, servers, ebook readers, old phones, game consoles.\n* AMD / CommonJS module support\n* No modification of subscribers (jQuery custom events modify subscribers)\n* Easy to understand and use (thanks to synchronization decoupling)\n* Small(ish), less than 1kb minified and gzipped\n\n## Getting PubSubJS\n\nThere are several ways of getting PubSubJS\n\n* Install via npm (`npm install pubsub-js`)\n* Use it directly from a CDN directly\n    - http://www.jsdelivr.com/#!pubsubjs\n    - https://cdnjs.com/libraries/pubsub-js\n* [Download a tagged version](https://github.com/mroderick/PubSubJS/tags) from GitHub\n\n**Note: the last version of this library available via bower is v1.5.4**\n\n## Examples\n\n### Basic example\n\n```javascript\n// create a function to subscribe to topics\nvar mySubscriber = function (msg, data) {\n    console.log( msg, data );\n};\n\n// add the function to the list of subscribers for a particular topic\n// we're keeping the returned token, in order to be able to unsubscribe\n// from the topic later on\nvar token = PubSub.subscribe('MY TOPIC', mySubscriber);\n\n// publish a topic asyncronously\nPubSub.publish('MY TOPIC', 'hello world!');\n\n// publish a topic syncronously, which is faster in some environments,\n// but will get confusing when one topic triggers new topics in the\n// same execution chain\n// USE WITH CAUTION, HERE BE DRAGONS!!!\nPubSub.publishSync('MY TOPIC', 'hello world!');\n```\n\n### Cancel specific subscription\n\n```javascript\n// create a function to receive the topic\nvar mySubscriber = function (msg, data) {\n    console.log(msg, data);\n};\n\n// add the function to the list of subscribers to a particular topic\n// we're keeping the returned token, in order to be able to unsubscribe\n// from the topic later on\nvar token = PubSub.subscribe('MY TOPIC', mySubscriber);\n\n// unsubscribe this subscriber from this topic\nPubSub.unsubscribe(token);\n```\n\n### Cancel all subscriptions for a function\n\n```javascript\n// create a function to receive the topic\nvar mySubscriber = function(msg, data) {\n    console.log(msg, data);\n};\n\n// unsubscribe mySubscriber from ALL topics\nPubSub.unsubscribe(mySubscriber);\n```\n\n### Clear all subscriptions for a topic\n\n```javascript\nPubSub.subscribe('a', myFunc1);\nPubSub.subscribe('a.b', myFunc2);\nPubSub.subscribe('a.b.c', myFunc3);\n\nPubSub.unsubscribe('a.b');\n// no further notications for 'a.b' and 'a.b.c' topics\n// notifications for 'a' will still get published\n```\n\n### Clear all subscriptions\n\n```javascript\nPubSub.clearAllSubscriptions();\n// all subscriptions are removed\n```\n\n### Hierarchical addressing\n\n```javascript\n// create a subscriber to receive all topics from a hierarchy of topics\nvar myToplevelSubscriber = function (msg, data) {\n    console.log('top level: ', msg, data);\n}\n\n// subscribe to all topics in the 'car' hierarchy\nPubSub.subscribe('car', myToplevelSubscriber);\n\n// create a subscriber to receive only leaf topic from hierarchy op topics\nvar mySpecificSubscriber = function (msg, data) {\n    console.log('specific: ', msg, data);\n}\n\n// subscribe only to 'car.drive' topics\nPubSub.subscribe('car.drive', mySpecificSubscriber);\n\n// Publish some topics\nPubSub.publish('car.purchase', {name: 'my new car'});\nPubSub.publish('car.drive', {speed: '14'});\nPubSub.publish('car.sell', {newOwner: 'someone else'});\n\n// In this scenario, myToplevelSubscriber will be called for all\n// topics, three times in total\n// But, mySpecificSubscriber will only be called once, as it only\n// subscribes to the 'car.drive' topic\n```\n\n## Tips\n\nUse \"constants\" for topics and not string literals. PubSubJS uses strings as topics, and will happily try to deliver your topics with ANY topic. So, save yourself from frustrating debugging by letting the JavaScript engine complain\nwhen you make typos.\n\n### Example of use of \"constants\"\n\n```javascript\n// BAD\nPubSub.subscribe('hello', function (msg, data) {\n\tconsole.log(data)\n});\n\nPubSub.publish('helo', 'world');\n\n// BETTER\nvar MY_TOPIC = 'hello';\nPubSub.subscribe(MY_TOPIC, function (msg, data) {\n\tconsole.log(data)\n});\n\nPubSub.publish(MY_TOPIC, 'world');\n```\n\n### Immediate Exceptions for stack traces in developer tools\n\nAs of version 1.3.2, you can force immediate exceptions (instead of delayed execeptions), which has the benefit of maintaining the stack trace when viewed in dev tools.\n\nThis should be considered a development only option, as PubSubJS was designed to try to deliver your topics to all subscribers, even when some fail.\n\nSetting immediate exceptions in development is easy, just tell PubSubJS about it after it has been loaded.\n\n```javascript\nPubSub.immediateExceptions = true;\n```\n\n## Contributing to PubSubJS\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## More about Publish/Subscribe\n\n* [The Many Faces of Publish/Subscribe](http://www.cs.ru.nl/~pieter/oss/manyfaces.pdf) (PDF)\n* [Addy Osmani's mini book on Patterns](http://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript)\n* [Publish / Subscribe Systems, A summary of 'The Many Faces of Publish / Subscribe'](http://downloads.ohohlfeld.com/talks/hohlfeld_schroeder-publish_subscribe_systems-dsmware_eurecom2007.pdf)\n\n## Versioning\n\nPubSubJS uses [Semantic Versioning](http://semver.org/) for predictable versioning.\n\n## Changelog\n\nPlease see [https://github.com/mroderick/PubSubJS/releases](https://github.com/mroderick/PubSubJS/releases)\n\n## License\n\nMIT: http://mrgnrdrck.mit-license.org\n\n## Alternatives\n\nThese are a few alternative projects that also implement topic based publish subscribe in JavaScript.\n\n* http://www.joezimjs.com/projects/publish-subscribe-jquery-plugin/\n* http://amplifyjs.com/api/pubsub/\n* http://radio.uxder.com/ — oriented towards 'channels', free of dependencies\n* https://github.com/pmelander/Subtopic - supports vanilla, underscore, jQuery and is even available in NuGet\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mroderick/PubSubJS.git"
  },
  "scripts": {
    "coverage": "nyc --reporter=lcov --reporter=text --reporter=json-summary npm test",
    "lint": "eslint src/ test/",
    "test": "mocha"
  },
  "version": "1.6.0"
}
