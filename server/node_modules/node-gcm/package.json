{
  "_args": [
    [
      {
        "raw": "node-gcm@^0.14.0",
        "scope": null,
        "escapedName": "node-gcm",
        "name": "node-gcm",
        "rawSpec": "^0.14.0",
        "spec": ">=0.14.0 <0.15.0",
        "type": "range"
      },
      "C:\\Work\\CoinKat\\server\\node_modules\\@parse\\push-adapter"
    ]
  ],
  "_from": "node-gcm@>=0.14.0 <0.15.0",
  "_id": "node-gcm@0.14.10",
  "_inCache": true,
  "_location": "/node-gcm",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-gcm-0.14.10.tgz_1516420762577_0.7614985692780465"
  },
  "_npmUser": {
    "name": "eladnava",
    "email": "eladnava@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "aws-sign2": "0.6.0",
    "aws4": "1.7.0",
    "caseless": "0.12.0",
    "combined-stream": "1.0.6",
    "extend": "3.0.1",
    "forever-agent": "0.6.1",
    "form-data": "2.1.4",
    "har-validator": "4.2.1",
    "hawk": "3.1.3",
    "http-signature": "1.1.1",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-types": "2.1.18",
    "ms": "2.0.0",
    "oauth-sign": "0.8.2",
    "performance-now": "0.2.0",
    "safe-buffer": "5.1.1",
    "stringstream": "0.0.5",
    "tough-cookie": "2.3.4",
    "tunnel-agent": "0.6.0",
    "uuid": "3.2.1"
  },
  "_requested": {
    "raw": "node-gcm@^0.14.0",
    "scope": null,
    "escapedName": "node-gcm",
    "name": "node-gcm",
    "rawSpec": "^0.14.0",
    "spec": ">=0.14.0 <0.15.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@parse/push-adapter"
  ],
  "_resolved": "https://registry.npmjs.org/node-gcm/-/node-gcm-0.14.10.tgz",
  "_shasum": "fd1e3357dab1c62115e6e2d342ac249fe05e7360",
  "_shrinkwrap": null,
  "_spec": "node-gcm@^0.14.0",
  "_where": "C:\\Work\\CoinKat\\server\\node_modules\\@parse\\push-adapter",
  "author": {
    "name": "Marcus Farkas",
    "email": "toothlessgear@finitebox.com"
  },
  "bugs": {
    "url": "https://github.com/ToothlessGear/node-gcm/issues"
  },
  "contributors": [
    {
      "name": "Marcus Farkas",
      "email": "toothlessgear@finitebox.com"
    },
    {
      "name": "monkbroc",
      "email": "jvanier@gmail.com",
      "url": "https://github.com/monkbroc"
    },
    {
      "name": "zlyinfinite",
      "url": "https://github.com/zlyinfinite"
    },
    {
      "name": "Yann Biancheri",
      "email": "yann.biancheri@gmail.com",
      "url": "https://github.com/yannooo"
    },
    {
      "name": "Hamid Palo",
      "email": "hamid@fogcreek.com",
      "url": "https://github.com/hamidp"
    },
    {
      "name": "Dotan J. Nahum",
      "email": "jondotan@gmail.com",
      "url": "https://github.com/jondot"
    },
    {
      "name": "Max Rabin",
      "email": "rabin.max@gmail.com",
      "url": "https://github.com/maxrabin"
    },
    {
      "name": "Olivier Poitrey",
      "email": "rs@dailymotion.com",
      "url": "https://github.com/rs"
    },
    {
      "name": "George Miroshnykov",
      "email": "george.miroshnykov@gmail.com",
      "url": "https://github.com/laggyluke"
    },
    {
      "name": "Alejandro Garcia Gil",
      "email": "alejandro@ideaknow.com",
      "url": "https://github.com/Alegege"
    },
    {
      "name": "Ismael Gorissen",
      "email": "ismael.gorissen@gmail.com",
      "url": "https://github.com/igorissen"
    },
    {
      "name": "Joris Verbogt",
      "email": "joris@notifica.re",
      "url": "https://github.com/silentjohnny"
    },
    {
      "name": "goelvivek",
      "email": "goelvivek2011@gmail.com",
      "url": "https://github.com/goelvivek"
    },
    {
      "name": "Lars Jacob",
      "email": "lars@jaclar.net",
      "url": "https://github.com/jaclar"
    },
    {
      "name": "Roman Iakovlev",
      "email": "roman.iakovlev@here.com",
      "url": "https://github.com/RomanIakovlev"
    },
    {
      "name": "Roman Skvazh",
      "email": "roman.skvazh@gmail.com",
      "url": "https://github.com/rskvazh"
    },
    {
      "name": "Jeremy Goldstein",
      "email": "jg-dev@live.com",
      "url": "https://github.com/jg10"
    },
    {
      "name": "Adam Patacchiola",
      "email": "adam@2fours.com",
      "url": "https://github.com/surespot"
    },
    {
      "name": "Ivan Longin",
      "email": "ivan.longin@infobip.com",
      "url": "https://github.com/ilongin"
    },
    {
      "name": "Paul Bininda",
      "email": "paul@bininda.com",
      "url": "https://github.com/pbininda"
    },
    {
      "name": "Matt Merkes",
      "email": "matt.merkes@gmail.com"
    },
    {
      "name": "Niels Roesen Abildgaard",
      "email": "niels.abildgaard@gmail.com",
      "url": "https://github.com/hypesystem"
    },
    {
      "name": "Nonemoticoner",
      "email": "nonemoticoner@gmail.com",
      "url": "https://github.com/Nonemoticoner"
    },
    {
      "name": "Simen Bekkhus",
      "email": "sbekkhus91@gmail.com",
      "url": "https://github.com/SimenB"
    },
    {
      "name": "Alexander Johansson",
      "email": "alex@dice.fm",
      "url": "https://github.com/KATT"
    },
    {
      "name": "Ashwin R",
      "email": "ashrko619@gmail.com",
      "url": "https://github.com/ashrko619"
    },
    {
      "name": "Kaija Chang",
      "email": "kaija.chang@gmail.com",
      "url": "https://github.com/kaija"
    },
    {
      "name": "Mo Kamioner",
      "email": "mkamioner@gmail.com",
      "url": "https://github.com/mkamioner"
    },
    {
      "name": "Bastien LÃ©onard",
      "email": "bastien.leonard@gmail.com",
      "url": "https://github.com/bastienleonard"
    },
    {
      "name": "Elad Nava",
      "email": "eladnava@gmail.com",
      "url": "https://github.com/eladnava"
    },
    {
      "name": "Marc Obrador",
      "email": "marcobrador89@gmail.com",
      "url": "https://github.com/marcobrador"
    },
    {
      "name": "Chirag Choudhary",
      "email": "chirag200666@gmail.com",
      "url": "https://github.com/chirag200666"
    },
    {
      "name": "Alexander Amin",
      "email": "alexander.amin@high5-it.de",
      "url": "https://github.com/AlexAmin"
    },
    {
      "name": "Gaurav Nolkha",
      "email": "gaurav@swiftday.com",
      "url": "https://github.com/vibgy"
    }
  ],
  "dependencies": {
    "debug": "^3.1.0",
    "lodash": "^3.10.1",
    "request": "2.81.0"
  },
  "description": "Easy interface for Google's Cloud Messaging service (now Firebase Cloud Messaging)",
  "devDependencies": {
    "chai": "^2.2.0",
    "mocha": "^2.2.4",
    "proxyquire": "^1.4.0",
    "sinon": "^1.14.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-0qEGKVHgj6xyT1ORiATXMr9OhmhQbUxMU8RNceS6eiEjxQm/ifOi3waocQk0PoJbxkrl1wQVh1i0oivP/YiXWg==",
    "shasum": "fd1e3357dab1c62115e6e2d342ac249fe05e7360",
    "tarball": "https://registry.npmjs.org/node-gcm/-/node-gcm-0.14.10.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "index.js",
    "lib/"
  ],
  "gitHead": "349ab10f6e55395d8feefbafadf5fe24ef9bc66c",
  "homepage": "https://github.com/ToothlessGear/node-gcm",
  "keywords": [
    "google",
    "cloud",
    "push",
    "notifications",
    "android",
    "c2dm",
    "gcm",
    "fcm",
    "firebase",
    "ios",
    "apn",
    "messaging"
  ],
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "eladnava",
      "email": "eladnava@gmail.com"
    },
    {
      "name": "hypesystem",
      "email": "niels.abildgaard@gmail.com"
    },
    {
      "name": "toothlessgear",
      "email": "toothlessgear@finitebox.com"
    }
  ],
  "name": "node-gcm",
  "optionalDependencies": {},
  "readme": "# node-gcm\n\n[![Join the chat at https://gitter.im/ToothlessGear/node-gcm](https://badges.gitter.im/ToothlessGear/node-gcm.svg)](https://gitter.im/ToothlessGear/node-gcm?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![npm](https://badge.fury.io/js/node-gcm.svg)](https://www.npmjs.com/package/node-gcm)\n\nThe goal of this project is providing the best and most easily used interface for Google's Cloud Messaging service (now called Firebase Cloud Messaging, FCM).\nWe appreciate all the help we can get!\nIf you want to help out, check out the [Guidelines for Contributing](CONTRIBUTING.md) section.\n\nIf you are developing an open-source project with a broader scope (like a full Firebase suite), we would love for you to use node-gcm internally.\n\nSee the [official FCM documentation](https://firebase.google.com/docs/cloud-messaging/) for more information.\n\nWe are currently working on version 1.0.0 of the project, and it is available in an early alpha version.\nFollow [PR #238](https://github.com/ToothlessGear/node-gcm/pull/238) to see current status.\n\n## Installation\n\n```bash\n$ npm install node-gcm --save\n```\n\n## Requirements\n\nThis library provides the server-side implementation of GCM.\nYou need to generate an [API Key](https://developers.google.com/cloud-messaging/gcm#apikey).\n\nGCM notifications can be sent to both [Android](https://developers.google.com/cloud-messaging/android/start) and [iOS](https://developers.google.com/cloud-messaging/ios/start).\nIf you are new to GCM you should probably look into the [documentation](https://developers.google.com/cloud-messaging/gcm).\n\n## Example application\n\nAccording to below **Usage** reference, we could create such application:\n\n```js\nvar gcm = require('node-gcm');\n\n// Set up the sender with your GCM/FCM API key (declare this once for multiple messages)\nvar sender = new gcm.Sender('YOUR_API_KEY_HERE');\n\n// Prepare a message to be sent\nvar message = new gcm.Message({\n    data: { key1: 'msg1' }\n});\n\n// Specify which registration IDs to deliver the message to\nvar regTokens = ['YOUR_REG_TOKEN_HERE'];\n\n// Actually send the message\nsender.send(message, { registrationTokens: regTokens }, function (err, response) {\n\tif (err) console.error(err);\n\telse console.log(response);\n});\n```\n\n## Usage\n\n```js\nvar gcm = require('node-gcm');\n\n// Create a message\n// ... with default values\nvar message = new gcm.Message();\n\n// ... or some given values\nvar message = new gcm.Message({\n\tcollapseKey: 'demo',\n\tpriority: 'high',\n\tcontentAvailable: true,\n\tdelayWhileIdle: true,\n\ttimeToLive: 3,\n\trestrictedPackageName: \"somePackageName\",\n\tdryRun: true,\n\tdata: {\n\t\tkey1: 'message1',\n\t\tkey2: 'message2'\n\t},\n\tnotification: {\n\t\ttitle: \"Hello, World\",\n\t\ticon: \"ic_launcher\",\n\t\tbody: \"This is a notification that will be displayed if your app is in the background.\"\n\t}\n});\n\n// Change the message data\n// ... as key-value\nmessage.addData('key1','message1');\nmessage.addData('key2','message2');\n\n// ... or as a data object (overwrites previous data object)\nmessage.addData({\n\tkey1: 'message1',\n\tkey2: 'message2'\n});\n\n// Set up the sender with you API key\nvar sender = new gcm.Sender('insert Google Server API Key here');\n\n// Add the registration tokens of the devices you want to send to\nvar registrationTokens = [];\nregistrationTokens.push('regToken1');\nregistrationTokens.push('regToken2');\n\n// Send the message\n// ... trying only once\nsender.sendNoRetry(message, { registrationTokens: registrationTokens }, function(err, response) {\n  if(err) console.error(err);\n  else    console.log(response);\n});\n\n// ... or retrying\nsender.send(message, { registrationTokens: registrationTokens }, function (err, response) {\n  if(err) console.error(err);\n  else    console.log(response);\n});\n\n// ... or retrying a specific number of times (10)\nsender.send(message, { registrationTokens: registrationTokens }, 10, function (err, response) {\n  if(err) console.error(err);\n  else    console.log(response);\n});\n```\n## Recipients\n\nYou can send push notifications to various recipient types by providing one of the following recipient keys:\n\n\n|Key|Type|Description|\n|---|---|---|\n|to|String|A single [registration token](https://developers.google.com/cloud-messaging/android/client#sample-register), [notification key](https://developers.google.com/cloud-messaging/notifications), or [topic](https://developers.google.com/cloud-messaging/topic-messaging).\n|topic|String|A single publish/subscribe topic.\n|condition|String|Multiple topics using the [condition](https://firebase.google.com/docs/cloud-messaging/topic-messaging) parameter.\n|notificationKey|String|Deprecated. A key that groups multiple registration tokens linked to the same user.\n|registrationIds|String[]|Deprecated. Use registrationTokens instead.|\n|registrationTokens|String[]|A list of registration tokens. Must contain at least 1 and at most 1000 registration tokens.|\n\nIf you provide an incorrect recipient key or object type, an `Error` object will be returned to your callback.\n\nNotice that [you can *at most* send notifications to 1000 registration tokens at a time](https://github.com/ToothlessGear/node-gcm/issues/42).\nThis is due to [a restriction](http://developer.android.com/training/cloudsync/gcm.html) on the side of the GCM API.\n\n\n### Additional message options\n\n|Parameter|Usage|Description|\n|---|---|---|\n|collapseKey|Optional, string|This parameter identifies a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed.|\n|priority|Optional, string|Sets the priority of the message. Valid values are \"normal\" and \"high.\"|\n|contentAvailable|Optional, JSON boolean|On iOS, when a notification or message is sent and this is set to true, an inactive client app is awoken.|\n|timeToLive|Optional, JSON number|This parameter specifies how long (in seconds) the message should be kept in GCM storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks.|\n|restrictedPackageName|Optional, string|This parameter specifies the package name of the application where the registration tokens must match in order to receive the message.|\n|dryRun|Optional, JSON boolean|This parameter, when set to true, allows developers to test a request without actually sending a message.|\n|data|Optional, JSON object|This parameter specifies the custom key-value pairs of the message's payload.|\n|notification|Optional, JSON object|This parameter specifies the predefined, user-visible key-value pairs of the notification payload. See \"Notification payload option table\" below for more details.|\n\n## Notification usage\n\n```js\n\nvar message = new gcm.Message();\n\n// Add notification payload as key value\nmessage.addNotification('title', 'Alert!!!');\nmessage.addNotification('body', 'Abnormal data access');\nmessage.addNotification('icon', 'ic_launcher');\n\n// as object\nmessage.addNotification({\n  title: 'Alert!!!',\n  body: 'Abnormal data access',\n  icon: 'ic_launcher'\n});\n\n```\n\n**Note:** Notifications sent using `message.addNotification` are only displayed when your app is in the background. Consider sending the notification parameters using `message.addData` and manually building and displaying a notification in your push receiver logic.\n\n### Notification payload option table\n\n|Parameter|Platform|Usage|Description|\n|---|---|---|---|\n|title|Android, iOS (Watch)|Required (Android), Optional (iOS), string|Indicates notification title. This field is not visible on iOS phones and tablets.|\n|body|Android, iOS|Optional, string|Indicates notification body text.|\n|icon|Android|Required, string|Indicates notification icon. On Android: sets value to myicon for drawable resource myicon.png.|\n|sound|Android, iOS|Optional, string|Indicates sound to be played. Supports only default currently.|\n|badge|iOS|Optional, string|Indicates the badge on client app home icon.|\n|tag|Android|Optional, string|Indicates whether each notification message results in a new entry on the notification center on Android. If not set, each request creates a new notification. If set, and a notification with the same tag is already being shown, the new notification replaces the existing one in notification center.|\n|color|Android|Optional, string|Indicates color of the icon, expressed in #rrggbb format|\n|click_action|Android, iOS|Optional, string|The action associated with a user click on the notification. On Android, if this is set, an activity with a matching intent filter is launched when user clicks the notification. For example, if one of your Activities includes the intent filter: (Appendix:1)Set click_action to OPEN_ACTIVITY_1 to open it. If set, corresponds to category in APNS payload.|\n|body_loc_key|iOS|Optional, string|Indicates the key to the body string for localization. On iOS, this corresponds to \"loc-key\" in APNS payload.|\n|body_loc_args|iOS|Optional, JSON array as string|Indicates the string value to replace format specifiers in body string for localization. On iOS, this corresponds to \"loc-args\" in APNS payload.|\n|title_loc_args|iOS|Optional, JSON array as string|Indicates the string value to replace format specifiers in title string for localization. On iOS, this corresponds to \"title-loc-args\" in APNS payload.|\n|title_loc_key|iOS|Optional, string|Indicates the key to the title string for localization. On iOS, this corresponds to \"title-loc-key\" in APNS payload.|\n\nNotice notification payload defined in [GCM Connection Server Reference](https://developers.google.com/cloud-messaging/server-ref#table1)\n\n## Custom HTTP request options\n\nYou can provide custom `request` options such as `proxy` and `timeout` for the HTTP request to the GCM API. For more information, refer to [the complete list of request options](https://github.com/request/request#requestoptions-callback). Note that the following options cannot be overriden: `method`, `uri`, `body`, as well as the following headers: `Authorization`, `Content-Type`, and `Content-Length`.\n\n```js\n// Set custom request options\nvar requestOptions = {\n\tproxy: 'http://127.0.0.1:8888',\n\ttimeout: 5000\n};\n\n// Set up the sender with your API key and request options\nvar sender = new gcm.Sender('YOUR_API_KEY_HERE', requestOptions);\n\n// Prepare a GCM message...\n\n// Send it to GCM endpoint with modified request options\nsender.send(message, { registrationTokens: regTokens }, function (err, response) {\n    if(err) console.error(err);\n    else     console.log(response);\n});\n```\n\n## GCM client compatibility\n\nAs of January 9th, 2016, there are a few known compatibility issues with 3rd-party GCM client libraries:\n\n### phonegap-plugin-push\n\n* [No support for subscribing to PubSub topics](https://github.com/phonegap/phonegap-plugin-push/issues/79)\n* [Requirement for `data` payload object when sending a `notification` object](https://github.com/phonegap/phonegap-plugin-push/issues/387)\n* [Requirement for all 3 `notification` fields when sending a `notification` object (title, icon, message)](https://github.com/ToothlessGear/node-gcm/issues/180)\n\nThese issues are out of this project's context and can only be fixed by the respective 3rd-party project maintainers.\n\n## Debug\n\nTo enable debug mode (print requests and responses to and from GCM),\nset the `DEBUG` environment flag when running your app (assuming you use `node app.js` to run your app):\n\n```bash\nDEBUG=node-gcm node app.js\n```\n\n## Donate\n\n Bitcoin: [13iTQf7tDhrKgibw2Y3U5SyPJa7R8sQmHQ](https://blockchain.info/address/13iTQf7tDhrKgibw2Y3U5SyPJa7R8sQmHQ)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ToothlessGear/node-gcm.git",
    "web": "http://github.com/ToothlessGear/node-gcm"
  },
  "scripts": {
    "test": "mocha test/**/*Spec.js"
  },
  "version": "0.14.10"
}
